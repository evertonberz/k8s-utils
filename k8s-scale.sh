#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([csvfile],[c],[Replicas csvfile to rescale deployments])
# ARG_POSITIONAL_SINGLE([command],[descale or rescale],[])
# ARG_POSITIONAL_INF([namespaces],[namespace1 namespace2 namespaceN],[])
# ARG_HELP([k8s-scale v0.1])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_namespaces=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_csvfile=


print_help()
{
	printf '%s\n' "k8s-scale v0.1"
	printf 'Usage: %s [-c|--csvfile <arg>] [-h|--help] <command> [<namespaces-1>] ... [<namespaces-n>] ...\n' "$0"
	printf '\t%s\n' "<command>: descale or rescale"
	printf '\t%s\n' "<namespaces>: namespace1 namespace2 namespaceN"
	printf '\t%s\n' "-c, --csvfile: Replicas csvfile to rescale deployments (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--csvfile)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_csvfile="$2"
				shift
				;;
			--csvfile=*)
				_arg_csvfile="${_key##--csvfile=}"
				;;
			-c*)
				_arg_csvfile="${_key##-c}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'command'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_command "
	_our_args=$((${#_positionals[@]} - 1))
	for ((ii = 0; ii < _our_args; ii++))
	do
		_positional_names="$_positional_names _arg_namespaces[$((ii + 0))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])

# https://betterdev.blog/minimal-safe-bash-script-template/ 
# [[[

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

setup_colors

# ]]] 

main() {
  #msg "Value of --csvfile: $_arg_csvfile"
  #msg "Value of command: $_arg_command"
  #msg "Value of namespaces:"
  #for namespace in "${_arg_namespaces[@]}"
  #do
  #  msg $namespace
  #done

  case "$_arg_command" in
    "descale")
      descale
      ;;
    "rescale")
      rescale
      ;;
    *)
      die "You have failed to specify what to do correctly: descale or rescale" 1
      ;;
  esac
      
}

descale() {
  csvfile=$(mktemp -t replicas-XXXXXX.csv)
  #echo "csvfile: $csvfile"
  #csvfile="/tmp/replicas.csv"
  #rm -f $csvfile

  for namespace in "${_arg_namespaces[@]}"
  do
    msg "Get deployment/statefulset replicas on namespace $namespace ..."
    kubectl get deployment,statefulset -n $namespace -o jsonpath='{range .items[*]}{@.metadata.namespace},{@.kind},{@.metadata.name},{@.spec.replicas}{"\n"}{end}' >> $csvfile
  done

  while IFS="," read -r namespace kind resource replicas
  do
    msg "Descaling $namespace - $kind - $resource ..."
    kubectl scale -n $namespace --replicas=0 $kind $resource 
  done < $csvfile

  msg "All resources have been scaled to ${RED}zero${NOFORMAT}."
  msg "Replica values are stored in ${csvfile}"
  msg "In case you need to rescale, use: k8s-scale.sh --csvfile ${csvfile} rescale"
}

rescale() {
  while IFS="," read -r namespace kind resource replicas
  do
    msg "Rescaling $namespace - $kind - $resource ..."
    kubectl scale -n $namespace --replicas=$replicas $kind $resource
  done < $_arg_csvfile
}

main $@
